import type { AliasContext, AliasReplaced } from './alias';
import type { AcornNode } from './types';
export interface ImporteeGlob {
    glob: {
        glob: string;
        valid: boolean;
    };
    alias?: AliasReplaced;
}
export declare class DynamicImportVars {
    private aliasContext;
    constructor(aliasContext: AliasContext);
    dynamicImportToGlob(node: AcornNode, sourceString: string, id: string): Promise<ImporteeGlob>;
}
/**
 * ```
 * In some cases, glob may not be available
 * e.g. fill necessary slash
 * `./views*` -> `./views/*`
 * `./views*.js` -> `./views/*.js`
 * ```
 */
export declare function tryFixGlobSlash(glob: string, depth?: boolean): string | void;
/**
 * ```
 * ðŸš§-â‘¡ If not extension is not specified, fill necessary extensions
 * e.g.
 * `./views/*`
 *   -> `./views/*.{js,ts,vue ...}`
 *   -> `./views/*` + `/index.{js,ts,vue ...}`
 * ```
 */
export declare function tryFixGlobExtension(glob: string, extensions: string[]): {
    globWithIndex?: string;
    glob: string;
} | void;
export declare function toDepthGlob(glob: string): string;
